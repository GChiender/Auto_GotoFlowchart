digraph G {
  rankdir=TB;
  node [fontname="Helvetica"];

  n32 [label="empty else", shape=box];
  n37 [label="return ErrInvalidResponse", shape=box];
  n47 [label="Function: checkMethodContain", shape=box];
  n52 [label="merge", shape=ellipse];
  n54 [label="Function: getFunctionName", shape=box];
  n5 [label="code := validateParams(ctx, req)", shape=box];
  n7 [label="return genResp(ctx, code)", shape=box];
  n14 [label="empty else", shape=box];
  n17 [label="return nil", shape=box];
  n30 [label="if !messageField.IsValid()", shape=diamond];
  n34 [label="if messageField.String() == \"\"", shape=diamond];
  n35 [label="retcodeField := reflect.ValueOf(resp).Elem().FieldByName(\"RetCode\")", shape=box];
  n1 [label="Start", shape=ellipse];
  n4 [label="log.Info(ctx, \"gRPC incoming request\", log.Fields{\"req\": req, \"rpcMethod\": info.FullMethod})", shape=box];
  n8 [label="empty else", shape=box];
  n9 [label="merge", shape=ellipse];
  n21 [label="Function: genResp", shape=box];
  n24 [label="return nil", shape=box];
  n25 [label="empty else", shape=box];
  n27 [label="return resp", shape=box];
  n6 [label="if code != pbModel.RetCode_SUCCESS", shape=diamond];
  n12 [label="if err != nil", shape=diamond];
  n16 [label="if err != nil", shape=diamond];
  n18 [label="empty else", shape=box];
  n20 [label="return resp", shape=box];
  n22 [label="resp := &pbService.CommonRes{RetCode: code}", shape=box];
  n31 [label="return ErrInvalidResponse", shape=box];
  n39 [label="merge", shape=ellipse];
  n3 [label="Function: Interceptor", shape=box];
  n19 [label="merge", shape=ellipse];
  n23 [label="if err != nil", shape=diamond];
  n40 [label="retcode := retcodeField.Int()", shape=box];
  n50 [label="method = fullMethod[lastSeprationIndex+1:]", shape=box];
  n51 [label="empty else", shape=box];
  n55 [label="return runtime.FuncForPC(reflect.ValueOf(i).Pointer()).Name()", shape=box];
  n10 [label="ctx = utils.DuplicateContext(ctx)", shape=box];
  n13 [label="return nil", shape=box];
  n29 [label="messageField := reflect.ValueOf(resp).Elem().FieldByName(\"Message\")", shape=box];
  n33 [label="merge", shape=ellipse];
  n38 [label="empty else", shape=box];
  n41 [label="messageField.SetString(pbModel.RetCode_name[int32(retcode)])", shape=box];
  n43 [label="merge", shape=ellipse];
  n44 [label="return nil", shape=box];
  n2 [label="End", shape=ellipse];
  n11 [label="resp, err = handler(ctx, req)", shape=box];
  n36 [label="if !retcodeField.IsValid()", shape=diamond];
  n42 [label="empty else", shape=box];
  n45 [label="Function: checkResponseIgnore", shape=box];
  n46 [label="return checkMethodContain(fullMethod, ignoreResponseMethods)", shape=box];
  n48 [label="lastSeprationIndex := strings.LastIndex(fullMethod, \"/\")", shape=box];
  n49 [label="if lastSeprationIndex != -1", shape=diamond];
  n53 [label="return false", shape=box];
  n15 [label="merge", shape=ellipse];
  n26 [label="merge", shape=ellipse];
  n28 [label="Function: handleRespMessage", shape=box];

  n1 -> n3;
  n3 -> n4;
  n4 -> n5;
  n5 -> n6;
  n6 -> n7 [label="Yes"];
  n6 -> n8 [label="No"];
  n7 -> n9;
  n8 -> n9;
  n9 -> n10;
  n10 -> n11;
  n11 -> n12;
  n12 -> n13 [label="Yes"];
  n12 -> n14 [label="No"];
  n13 -> n15;
  n14 -> n15;
  n15 -> n16;
  n16 -> n17 [label="Yes"];
  n16 -> n18 [label="No"];
  n17 -> n19;
  n18 -> n19;
  n19 -> n20;
  n20 -> n2;
  n1 -> n21;
  n21 -> n22;
  n22 -> n23;
  n23 -> n24 [label="Yes"];
  n23 -> n25 [label="No"];
  n24 -> n26;
  n25 -> n26;
  n26 -> n27;
  n27 -> n2;
  n1 -> n28;
  n28 -> n29;
  n29 -> n30;
  n30 -> n31 [label="Yes"];
  n30 -> n32 [label="No"];
  n31 -> n33;
  n32 -> n33;
  n33 -> n34;
  n35 -> n36;
  n36 -> n37 [label="Yes"];
  n36 -> n38 [label="No"];
  n37 -> n39;
  n38 -> n39;
  n34 -> n41 [label="Yes"];
  n34 -> n42 [label="No"];
  n41 -> n43;
  n42 -> n43;
  n43 -> n44;
  n44 -> n2;
  n1 -> n45;
  n45 -> n46;
  n46 -> n2;
  n1 -> n47;
  n47 -> n48;
  n48 -> n49;
  n49 -> n50 [label="Yes"];
  n49 -> n51 [label="No"];
  n50 -> n52;
  n51 -> n52;
  n52 -> n53;
  n53 -> n2;
  n1 -> n54;
  n54 -> n55;
  n55 -> n2;
}
